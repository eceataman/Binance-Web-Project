@model binance.bncData

@{ ViewBag.Title = "Graph"; }

<h2> @Model.Symbol</h2>

<html>
<head>
    <!-- Head içeriği burada yer alabilir -->
</head>
<body>
    <style>
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        th, td {
            padding: 8px;
            text-align: center;
            border: 1px solid #ddd;
        }

        th {
            background-color: #f2f2f2;
        }

        tr:nth-child(even) {
            background-color: #f2f2f2;
        }

        tr:hover {
            background-color: #e0e0e0;
        }
    </style>

    <div id="depthTable">
        <table>
            <thead>
                <tr>
                    <th colspan="2">Alış</th>
                    <th colspan="2">Satış</th>
                </tr>
                <tr>
                    <th>Fiyat</th>
                    <th>Miktar</th>
                    <th>Fiyat</th>
                    <th>Miktar</th>
                </tr>
            </thead>
            <tbody id="depthData">
            </tbody>
        </table>
    </div>

    <script>
    async function fetchDepthData(symbol) {
        const response = await fetch(`https://api.binance.com/api/v3/depth?symbol=${symbol}`);
        const data = await response.json();
        return data;
    }

    function renderDepthTable(bids, asks) {
        const depthDataElement = document.getElementById('depthData');
        depthDataElement.innerHTML = '';

        for (let i = 0; i < Math.max(bids.length, asks.length); i++) {
            const bidRow = bids[i] || [null, null];
            const askRow = asks[i] || [null, null];

            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${bidRow[0]}</td>
                <td>${bidRow[1]}</td>
                <td>${askRow[0]}</td>
                <td>${askRow[1]}</td>
            `;

            depthDataElement.appendChild(row);
        }
    }

    async function updateDepthTable() {
        const currentSymbol = "@Model.Symbol";
        const depthData = await fetchDepthData(currentSymbol);

        const bids = depthData.bids.slice(0, 10);
        const asks = depthData.asks.slice(0, 10);

        renderDepthTable(bids, asks);
    }

    // İlk çalıştırma
    updateDepthTable();

    // Her 5 saniyede bir güncelleme
    setInterval(updateDepthTable, 5000);
    </script>


    @* Geri dönme linki oluşturma *@
    <a href="@Request.UrlReferrer?.ToString()" class="btn btn-secondary">Geri Dön</a>




    <!-- TradingView widget'ı -->
    <div id="tradingview-widget-container">
        <script type="text/javascript" src="https://s3.tradingview.com/tv.js"></script>
        <script type="text/javascript">
        new TradingView.widget(
            {
                "width": 980,
                "height": 610,
                "symbol": "BINANCE:" + "@Model.Symbol", // ViewBag'dan sembol bilgisini alarak TradingView widget'ına gönderin
                "interval": "1",
                "timezone": "Etc/UTC",
                "theme": "dark",
                "style": "1",
                "locale": "tr",
                "toolbar_bg": "#f1f3f6",
                "enable_publishing": false,
                "allow_symbol_change": true,
                "hideideas": true
            }
        );
        </script>
    </div>
    <script>
        function updateTradingViewWidget(symbol) {
            // Grafik sayfasının URL'sini oluşturun
            const chartPageUrl = `/Home/SymbolChart?symbol=${symbol}`;

            // Grafik sayfasını yeni bir sekmede açın
            window.open(chartPageUrl, '_blank');
        }</script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>




</body>
</html>